package com.example.mainproject1;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;
import java.net.*;

// Android imports
import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.telephony.TelephonyManager;
import android.text.InputType;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;

// KSOAP2 imports for handling the SOAP methods to communicate with the mcheck methods
import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.AndroidHttpTransport;

// Paypal imports for handling payments via paypal.
import com.paypal.android.MEP.CheckoutButton;
import com.paypal.android.MEP.PayPal; 
import com.paypal.android.MEP.PayPalActivity;
import com.paypal.android.MEP.PayPalReceiverDetails;
import com.paypal.android.MEP.PayPalPayment;
/*
import com.google.gdata.client.authn.oauth.*;
import com.google.gdata.client.spreadsheet.*;
import com.google.gdata.data.*;
import com.google.gdata.data.batch.*;
import com.google.gdata.data.spreadsheet.*;
import com.google.gdata.util.*;
*/
/**This class is the main demonstration class for the package, with the most functionality.
 * 
 * @author pramakrishnan
 *
 */

@SuppressLint("ParserError")
public class TopUp extends Activity {
	/* The version of the application described by the class MyApplication. 
	 * This class extends Application to include a few extra information 
	 * that should be stored as information accessible to the entire application
	 * such as login information and a list of payment options.
	 */
	MyApplication myApp;
	
	/* ---- The interface elements that the user interacts with ---- */
	
	// The fields in the dialog boxes for the three input values
	EditText amountField, phoneNumberField, recipientDialogField;
	// The checkbox that the user ticks to specify that the top up recipient is himself. 
	// This checkbox is in the dialog for the recipient field
	CheckBox recipientIsMe;	
	// The clickable layouts when, upon being clicked, trigger the dialog boxes for the 
	// respective fields to be opened.
	LinearLayout enterAmount, enterRecipient, enterMethod;
	// The TextView fields that display the selected values for the required fields, 
	// which are populated after a value has been chosen by the user in its respective
	// dialog box interface.
	TextView paymentAmountField, recipientField, methodField;
	// The button to use the given information to make a payment.
	Button makePaymentButton;
	// The button to use the information to make a PayPal payment.
	// This button is automatically generated by the PayPal API
	CheckoutButton launchPayPalButton = null;
	
	private String selectedMethod;
	private int randomId;
	private String operator;
	private boolean paypalInitialized;
	
	/* The values that are used to make the payments. The top up amount is in TTD. 
	 * The recipient is a phone number. The payment method is the position of the
	 * selected payment method in myApp's ArrayList of PaymentMethods.
	 */
	public double topupAmount;
	public long recipient;
	public int paymentMethodItem;
	
	private CommonDialogs cd;
	
	/* Constants used to uniquely identify dialog boxes or results */
	private static final int PICK_CONTACT = 0;
	private static final int AMOUNT_ID = 1;
	private static final int RECIPIENT_ID = 2;
	private static final int METHOD_ID = 3;
	private static final int LOGIN_ID = 4;
	private static final int LOGIN_FAILED_ID = 5;
	private static final int VERIFY_PASSWORD = 6;
	private static final int RECEIPT_ID = 7;
	
	private static final int LOGIN_SUCCESSFUL = 0;
	private static final int LOGIN_FAIL = 1;
	private static final int LOGIN_CANCEL = 2;
	private static final int LOGIN_REGISTER = 3;
	
	private boolean verified = false;
	
	/* PayPal constants. When going live, PayPal.ENV_SANDBOX should be replaced with 
	 * PayPal.ENV_LIVE. The paypalAppId used here is the App ID that is always used 
	 * in the Sandbox environment. For use in the Live environment, an ID must be obtained
	 * from PayPal for use here.
	 */
	private static final int server = PayPal.ENV_SANDBOX;
	private static final String paypalAppId = "APP-80W284485P519543T";

	/* Data used to send the SOAP call */
	private static final String SOAP_ACTION = "http://InfoTechHubServices.com/MCheck/DoPosting";
	private static final String METHOD_NAME = "DoPosting";
	private static final String NAMESPACE = "http://InfoTechHubServices.com/MCheck";
	private static final String URL = "http://10.251.64.30:8081/mcheck.asmx";
	
	
	 /* Creates the Activity and initializes the variables */
	public void onCreate(Bundle savedInstanceState) {
		/* Standard code to create an Activity */	
        super.onCreate(savedInstanceState);
        setContentView(R.layout.topup_list);
        
		/* Initiates the Action Bar, setting the icon in the top-left 
		 * to go up one level (in this case, back to the home page)  */
        ActionBar actionBar = getActionBar();
        actionBar.setDisplayHomeAsUpEnabled(true);
        actionBar.setTitle("Top up");
        cd = new CommonDialogs();
        
        /* Initializes the LinearLayouts that, when clicked, open dialog 
         * boxes for their respective fields.
         */
        enterAmount = (LinearLayout)findViewById(R.id.enter_amount);
        enterAmount.setOnClickListener(enterListener);
        enterRecipient = (LinearLayout)findViewById(R.id.enter_recipient);
        enterRecipient.setOnClickListener(enterListener); 
        enterMethod = (LinearLayout)findViewById(R.id.enter_method);
        enterMethod.setOnClickListener(enterListener);
        
        /* Initializes the three TextViews that are inside each of the above
         * LinearLayouts, that are updated based on the user's choices in the 
         * Dialogs.
         */
        paymentAmountField = (TextView)findViewById(R.id.top_up_amount);
        recipientField = (TextView)findViewById(R.id.top_up_recipient);
        methodField = (TextView)findViewById(R.id.top_up_method);
        
        /* Initializes the payment button, and sets the listener to make a 
         * payment using the data filled in the fields when clicked.
         */
        makePaymentButton = (Button)findViewById(R.id.top_up_make_payment);
        makePaymentButton.setOnClickListener(makePayment);
        
        /* Initializes the random number generator to be used in the SOAP calls */
        Random rgen = new Random();
        randomId = 300000 + rgen.nextInt();
        
        /* Initializes the instance of MyApplication used throughout the application.*/
        myApp = (MyApplication)getApplication();    
        
        // Sets the default values of the payment amount to be $20.00, the default 
        // recipient to be the phone number of the device, and the payment method 
        // to be the user's preferred payment method, which is by default set to
        // the mobile wallet.
        topupAmount = 20.0;
        paymentAmountField.setText("TTD " + Double.toString(topupAmount));
        
        TelephonyManager telephonyManager = 
		 (TelephonyManager)getApplicationContext().getSystemService(Context.TELEPHONY_SERVICE);

		 String phoneNumber = telephonyManager.getLine1Number();
		 recipient = Long.parseLong(phoneNumber);
		 operator = telephonyManager.getNetworkOperatorName().toUpperCase(); 
		 recipientField.setText(phoneNumber, TextView.BufferType.EDITABLE);
		 
		 paymentMethodItem = myApp.preferredPaymentMethod;
		 methodField.setText(myApp.accounts.get(paymentMethodItem).getName());
        
        /* Shows the login Dialog if the user is not logged in */
		 cd.login(myApp, this);
	 }
	
	 /* A new onClickListener that is applied to all the clickable LinearLayouts.
	  * Delegates the action to the showDialog method depending on the ID of the 
	  * LinearLayout clicked.
	  */
	 private OnClickListener enterListener = new OnClickListener() {
		 public void onClick(View v) {
			 if(enterAmount.getId() == ((LinearLayout)v).getId()) {
				 cd.getPaymentAmount(TopUp.this);
				 String ttd = "TTD ";
				 topupAmount = Double.parseDouble(((String)paymentAmountField.getText()).substring(ttd.length()));
			 } else if(enterRecipient.getId() == ((LinearLayout)v).getId()) {
				 recipient = cd.getPhoneNumber(TopUp.this);
				 // recipient = Long.parseLong((String)recipientField.getText());
			 } else if(enterMethod.getId() == ((LinearLayout)v).getId()) {
				// Gets the list of payment methods from the data in the MyApplication instance
			    	// and copies it to an array of CharSequences.
				 
		    	ArrayList<String> paymentMethodsList = myApp.paymentNames();
		    	final CharSequence[] items;
		    	items = new CharSequence[paymentMethodsList.size()];
		    	for(int i = 0; i < paymentMethodsList.size(); i++){
			    	items[i] = (CharSequence)paymentMethodsList.get(i);
		    	}
				 cd.getPaymentMethodItem(items, TopUp.this);
				 for(int i = 0; i < myApp.accountsSize(); i++) {
					 if(methodField.getText().equals(items[i])) paymentMethodItem = i;
				 }
    	    	// Changes the layout to include the PayPal button if the PayPal 
    	    	// payment method is selected.
    	    	if(items[paymentMethodItem].equals("PayPal")) {
    	    		if(!paypalInitialized) {
    	    			initPayPal();
    	    			paypalInitialized = true;
    	    		}
    	    		makePaymentButton.setVisibility(View.INVISIBLE);
    	    		launchPayPalButton.setVisibility(View.VISIBLE);
    	    	} else {
    	    		makePaymentButton.setVisibility(View.VISIBLE);
    	    		if(launchPayPalButton != null) {
	    	    		launchPayPalButton.setVisibility(View.INVISIBLE);		    	    			
    	    		}
    	    	}
			 }
		 }	 
	 };
	 

	 /* Sets the menu options to be determined by the appropriate menu resource */
	@Override
	 public boolean onCreateOptionsMenu(Menu menu) {
	     MenuInflater inflater = getMenuInflater();
	     inflater.inflate(R.menu.top_up, menu);
	     return true;
	 }
	
	 /* Does stuff for each of the menu selections.
	 */
	@Override
	 public boolean onOptionsItemSelected(MenuItem item) {
	     switch (item.getItemId()) {
	         case android.R.id.home:
	             // App icon in action bar clicked; go home
	             Intent intent = new Intent(this, MainActivity.class);
	             intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
	             startActivity(intent);
	             return true;
	         case R.id.home_action:
	        	// Home icon selected. Go home. 
	 			Intent intent2 = new Intent(getApplicationContext(), MainActivity.class);
	 			startActivity(intent2);
	         case R.id.auto_top_up_action:
	        	 // Auto icon selected. Go to Auto Top up
	        	 Intent intent3 = new Intent(getApplicationContext(), AutoTopUp.class);
	        	 startActivity(intent3);
	         default:
	             return super.onOptionsItemSelected(item);
	     }
	 }
	
	/* Initiates the PayPal instance */
	 private void initPayPal() {
		PayPal pp = PayPal.getInstance();
		
		/* Initiates the paypal libraries by App ID, and sets the language and the shipping settings */
		if (pp == null) {
		    try {
		        pp = PayPal.initWithAppID(getApplicationContext(), paypalAppId, server);
		    } catch (IllegalStateException e) {
		        throw new RuntimeException(e);
		    }
		    pp.setLanguage("en_US"); 
		    pp.setShippingEnabled(false);
		}
		
		/* Gets the readymade PayPal button from the PayPal class. 
		 * The available sizes of the Button are BUTTON_152x33, 
		 * BUTTON_194x37, BUTTON_278x43, and BUTTON_294x45.
		 */
     	launchPayPalButton = pp.getCheckoutButton(this, PayPal.BUTTON_194x37, CheckoutButton.TEXT_PAY);
     	
     	/* Adds the button to the right Layout, and sets it to INVISIBLE, by default. */
     	RelativeLayout buttonLayout = (RelativeLayout)findViewById(R.id.top_up_button_layout);
     	buttonLayout.addView(launchPayPalButton);
     	launchPayPalButton.setVisibility(View.INVISIBLE);
     	launchPayPalButton.setOnClickListener(makePayPalPayment);
	 }
	 
	 /* Responds to the PayPal button being clicked. */
	 private OnClickListener makePayPalPayment = new OnClickListener() { 
    	public void onClick(View v) {
    		/* Constructs a new payment type, setting the amount to be topupAmount. */
    		ArrayList<String> receiptItems = new ArrayList<String>();
	    	receiptItems.add("Top up payment");
	    	receiptItems.add("Amount: " + Double.toString(topupAmount));
	    	receiptItems.add("Recipient: " + Long.toString(recipient));
	    	receiptItems.add("Payment Method: " + myApp.accounts.get(paymentMethodItem).getName());
			if(cd.confirmPayment(receiptItems, TopUp.this)) {
				if(paymentMethodItem == 1) {
					paypalPayment();
				} else {
					payment();
				}
			}    	
		}
    };
    
    private void paypalPayment() {
    	PayPalPayment newPayment = new PayPalPayment();
		newPayment.setSubtotal(new BigDecimal(topupAmount));
		newPayment.setCurrencyType("TTD");
		
		/* TODO: Change the merchant email address and the merchant name */
		newPayment.setRecipient("my@email.com"); 
		newPayment.setMerchantName("My Company");
		
		/* Starts the PayPal activity, and waits for the result, taking in the Result code 1 */
		Intent paypalIntent = PayPal.getInstance().checkout(newPayment, getApplicationContext());
		startActivityForResult(paypalIntent, 1);
    }


	
	/* Collects and deals with results returned from the Contacts and PayPal activities. */
	@Override
	protected void onActivityResult(int requestCode, int resultCode,
	         Intent data) {
		if(requestCode == 1) {
			 if(resultCode == RESULT_OK) {
				 Toast.makeText(getApplicationContext(), data.getStringExtra(PayPalActivity.EXTRA_PAY_KEY), Toast.LENGTH_LONG).show();
				 ArrayList<String> receiptItems = new ArrayList<String>();
 		    	receiptItems.add("Top up payment");
 		    	receiptItems.add("Amount: " + Double.toString(topupAmount));
 		    	receiptItems.add("Recipient: " + Long.toString(recipient));
 		    	receiptItems.add("Payment Method: " + myApp.accounts.get(paymentMethodItem).getName());
 		    	cd.displayReceipt(receiptItems,TopUp.this);
			 } else if(resultCode == RESULT_CANCELED) {
				 Toast.makeText(getApplicationContext(), "Canceled!", Toast.LENGTH_LONG).show();
			 } else if(resultCode == PayPalActivity.RESULT_FAILURE) {
				 Toast.makeText(getApplicationContext(), PayPalActivity.EXTRA_ERROR_MESSAGE, Toast.LENGTH_LONG).show();
			 }
		 }
	}
	    
	/* Retrieves the data from the top-up request and makes the request */
	 private OnClickListener makePayment = new OnClickListener() { 
	    	public void onClick(View v) {
	    		ArrayList<String> receiptItems = new ArrayList<String>();
		    	receiptItems.add("Top up payment");
		    	receiptItems.add("Amount: " + Double.toString(topupAmount));
		    	receiptItems.add("Recipient: " + Long.toString(recipient));
		    	receiptItems.add("Payment Method: " + myApp.accounts.get(paymentMethodItem).getName());
		    	
    			if(cd.confirmPayment(receiptItems, TopUp.this)) {
    				if(paymentMethodItem == 1) {
    					paypalPayment();
    				} else {
    					payment();
    				}
    			}
	    	}
	    };
	    
	    private void payment() {
	    	if(!myApp.user.equals(myApp.pass)) {
	    		try {
		    		long phoneNumber = recipient;
	    			int paymentAmount = (int)topupAmount;
	    			
	    			/* Alert indicating to the user that a payment is being attempted */
	    			Toast.makeText(getApplicationContext(), "Topping up $" + Double.toString(topupAmount) + " to " + Long.toString(phoneNumber), Toast.LENGTH_LONG).show();
	    			String paymentMethod = ""; //Change this to be an encoding of credit card info
	    			
	    			// Gets the error message from the SOAP attempt to make a top up
	    			String error = paymentSuccessful(phoneNumber,paymentAmount,paymentMethod);
	    			
	    			// "" is the error string for a successful payment
	    			if(error.equals("")) {
	    				ArrayList<String> receiptItems = new ArrayList<String>();
	    		    	receiptItems.add("Top up payment");
	    		    	receiptItems.add("Amount: " + Double.toString(topupAmount));
	    		    	receiptItems.add("Recipient: " + Long.toString(recipient));
	    		    	receiptItems.add("Payment Method: " + myApp.accounts.get(paymentMethodItem).getName());
	    			} else {
	    				// Prints out the error message as a Toast.
	    				Toast.makeText(getApplicationContext(), 
	    					       error, Toast.LENGTH_LONG).show();
	    			}
	    		} catch(Exception ex) {
	    			/* Returns an error message if the payment fails outside of the SOAP call */
	    			Toast.makeText(getApplicationContext(), "There was an error.", Toast.LENGTH_LONG).show();
	    		}
	    	}
	    }
	    
	 /* Makes the SOAP call to the mchek service. */
	 private String paymentSuccessful(long phone, int amount, String paymentMethod) {
		 SoapObject Request = new SoapObject(NAMESPACE, METHOD_NAME);
		 Request.addProperty("msisdn", phone);
		 Request.addProperty("mChekReferenceId", Integer.toString(randomId));
		 Request.addProperty("msisdnOperator", operator);
		 Request.addProperty("Amount", (double)amount);
		 Request.addProperty("AccountType", "C");
		 Request.addProperty("KeyValues", "");
		 
		 // For the SOAP1.1 call. Use constants SoapEnvelope.VER10 and SoapEnvelope.VER12 
		 // for the calls with SOAP1.0 and SOAP1.2 respectively.
		 SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
		 soapEnvelope.dotNet = true;
		 soapEnvelope.setOutputSoapObject(Request);
		 
		 @SuppressWarnings("deprecation")
		AndroidHttpTransport aht = new AndroidHttpTransport(URL);
		 if(myApp.user.equals(myApp.pass)) return "";
		 try {
			 // Calls the SOAP action and gets the result, as cast to a string.
			 aht.call(SOAP_ACTION, soapEnvelope);
			 SoapPrimitive resultString = (SoapPrimitive)soapEnvelope.getResponse();
			 CharSequence result = (CharSequence)resultString;
			 return (String) result;
		 } catch(Exception e) {
			 // Returns a failed message.
			 Toast.makeText(getApplicationContext(), "SOAP failed", Toast.LENGTH_LONG).show();
			 e.printStackTrace();
			 return "Failed Top up";
		 }
	 }
}